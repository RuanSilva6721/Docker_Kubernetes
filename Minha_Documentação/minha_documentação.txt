*Docker
É um software que reduz a complexidade de setup de aplicações. Onde configuramos containers, que são como servidores para rodar nossas aplicações

-https://hub.docker.com : para encontrar imagem no repo do docker
-Por que usar docker? proporciona mais velocidade na configuração do ambiente de um dev, pouco tempo gasto em manutenção, containers são executados como configurações,maior performance para executar aplicações, mais performático que uma VM, nós livra da Matrix from Hell
-Vesões do Docker: 
    1-CE(Community Edition): Edição gratuitta, que nos possibilita utilizar o docker normalmente, é a que vamos optar
    2-EE(Enterprise Edtion): edição paga, há uma garantia maior das versões que são disponibilizadas e você tem suporte do time do Docker

-Imagem e container são recursos fundamentais do Docker
-docker run: para rodar os containers

*containers 
É Um pacote de codigo que pode executar uma ação, por exemplo: uma aplicação de Node.js, PHP, python etc.. 
-containers utilizam imagens para poderem ser executados
-Os containers de docker não tem conexão co nada de fora deles
-Múltiplos containers podem rodar juntos, exemplo: um para PHP eoutro para Mysql
-Imagem: é um projeto que será executado pelo container, todas as instruções estarão declaradas nela
-Fluxo: programamos uma imagem e a executamos por meio de um container
-docker run 'imagem': executar uma imagem em um container
-docker ps ou docker container ls: exibe quais containers estão sendo executados no momento
-docker ps -a: temos também todos os containers já executado e estão em execução na máquina 
-docker run -it 'imagem': para ter acesso ao terminal da imagem

-container x VM:
    1-container é uma aplicação que serve para um determinado fim, não possui sistema operacional, seu tamanho é de alguns MBs. Containers acabam gastando menos recursos para serem executados, por causa do seu uso específico

    2-VM possui sistema operacional próprio, tamanho de gbs, pode executar diversas funções ao mesmo tempo. VMs gastam mais recursos, porém podem execer mais funções

-docker run -d 'imagem': para rodar a imagem em background
-docker stop 'id ou name do container': para parar o container
-docker run -p 'port' 'imagem': para expor portas
-docker start 'id ou name da imagem': para voltar o container parado

-docker run x docker run:
    1-docker run sempre cria um novo container

    2-docker start aproveita  um container antigo

-docker run --name 'novo_nome' 'imagem': para renomear o container
-docker logs 'id ou name da imagem': para ver o log do container
-docker rm 'id ou name da imagem': ppara remover o container

*Imagem
-dicas para escolher imagem: buscar imagens oficiais, ver quantidade de downloads e a quantidade de stars
    1.Dockerfile
    2.from: imagem base
    3.workdir: diretório da aplicação
    4.expose: porta da aplicação
    5.copy: quais arquivos precisam ser copiados
-docker build 'diretório da imagem': para fazer o build da imagem
-docker image ls: listar as imagens 
-leyers: são as camadas
-docker pull 'imagem': para baixar a imagem do repo do docker, vai ficar guarda no pc  
-docker run --help: podemos ver todas as opções disponiveis nos comandos

observação: um ou mais container podem usar as mesma inagem

-docker tag 'id da imagem' 'name da imagem': (adicionar nome para imagem)
-docker tag 'id da imagem' 'name da imagem':'nome da tag'(adicionar nome e nome da tag para imagem)
-docker build -t 'name da imagem' . : para criar a imagem com um nome
-docker rmi 'imagem': para remover a imagem
-docker rmi -f 'imagem': para forçar a remoção da imagem
-docker system prune: podemos remover imagens, containers e networks
-docker run --rm 'container': um container pode ser automaticamente deletado após sua utilização
-docker cp 'imagem' : para copiar arquivos entre containers
-docker top 'conatiner': para verificar dados de execução de um container 
-docker inspect 'container': entender como o container está configurado
-docker stats : para verificar os processos que estão sendo execitados em um container
-docker login: para fazer o login com repo do docker
-docker logout: para remover as credenciais
-docker push 'imagem': mandar a imagem para o repo do docker
-docker pull 'imagem': puxar a imagem do o repo do docker
-docker rmi 'imagem': remover a imagem do o repo do docker


*Volume
Uma forma prática de persistir dados em aplicações e não depender de containers para isso


-Anônimos(anonymous): Diretórios criados pela flag "-v", porém com um nome aleatório
-Nomeados(named): São volumes com nomes, podemos nos referir a estes facilmente e saber para que são ultilizados no nosso ambiente
-Bind mounts: Uma forma de salvar dados na nossa máquina, sem o gerenciamento do Docker, informamos um diretório para este fim

-docker run -v  /'diretótio': criar um volume anônimo
-docker volume ls: para ver os volumes
-docker run -v  nomedovolume://'diretótio': criar um volume nomeado. ex: sudo docker run -d -p 80:80 --name phpmessages_container5 -v nomedovolume:/var/www/html/messages --rm  phpmessages2
-docker run -v caminho ate o a pasta://'diretótio': para criar bind mounts, salva o volume na nossa máquina
-docker volume create 'nome do volume': para criar voluems manualmente
-docker volume inspect 'nome do volume': para inspecionar o volume
-docker volume rm 'nome do volume': para remover o volume
-docker volume prune: remover todos os volumes não ultilizados


*networks
Uma forma de gerenciar a conexão do Docker com outras plataformas ou até mesmp entre containers

-tipos de conexão: Externa(conexão com uma API de um servidor remoto), com host(comunicação com a máquina que está executando o Docker), entre containers(comunicação que ultiliza o driver bridge e permite a comunicação entre dois ou mais containers)
-tipos de drives: 
    1-bridge: o mais comum e default do Docker, ultizado quando containers precisam se conectar(na maioria das vezes optamos por este driver)
    2-host: permite a conexão entre um container a máquina que está hosteando o Docker
    3-macvlan: permite a conexão a um container por um MAC address
    4-none: remove todas conexões de rede de um container
    5-plugins: permite extensões de terceiros para criar outras redes

-docker network ls: para verificar todas as redes do nosso ambiente 
-docker network create 'nome da rede': para criar uma rede
-docker network create -d 'tipo do drive' 'nome da rede': para criar uma rede com um drieve específico
-docker network rm 'nome da rede'
-docker network prune: para remover todas as redes não ultilizadas
-docker network logs 'nome da rede': para ver o log da rede
-docker network connect 'nome da rede' 'id do container': conectar um container a uma rede
-docker network disconnect 'nome da rede' 'id do container': desconectar um container a uma rede
-docker network inspect 'nome da rede': detalhes de uma rede

*YAML







*CI/CD
-CI(integração contínua): garantir que ao integar o código com o código de outros devs estaja dentro dos padrões de qualidade definido pelo empresa
-CD(entrega contínua): coloca o código testado em  um servidor de forma contínua


*jenkins, Sonarqube, Artifactory

-jenkins: é um servidor de automação independente e de código aberto. È usado para o build da aplicação
    1-altamente configurável
    2-A comunidade adicional desenvolveu plugins fornecem ainda mais flexibilidade
    3-configurar: associar a um servidor de contrle de versão

-Sonarqube: é uma plataforma de software livre usada por equipes de desenvolvimento para gerenciar a qualidade de código-fonte
    1-geração de relatórios: código duplicado, padrões de codificação, testes unitários, complexidade de código, erros pontencias, comentários, design e arquitetura
    2-inspeção contínua

-Artifactory: o JFrog Artifactory é um gerenciador universal de artefatos binários usado na integração contínua(CI) fluxo de trabalho de entrega contínua(CD) no processo de DevOps